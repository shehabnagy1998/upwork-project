{"version":3,"sources":["components/OneCard.js","components/Cards.js","components/CardFullscreen.js","App.js","serviceWorker.js","store/reducers/rootReducer.js","store/sagas/rootSaga.js","index.js"],"names":["Card","_this$props$card","this","props","card","color","height","width","id","setActive","cardStyle","backgroundColor","react_default","a","createElement","NavLink","to","concat","className","active","style","onClick","title","Component","connect","state","ownProps","dispatch","type","value","Cards","_this$props","cards","animation","setAnim","htmlFor","name","defaultChecked","onChange","map","OneCard","key","val","CardFullscreen","match","params","find","toString","App","react","Route","render","_ref","location","react_transition_group","timeout","classNames","Switch","path","exact","component","Boolean","window","hostname","rndColors","initState","nums","min","max","colors","arguments","length","undefined","Array","fill","Math","floor","random","generateArray","rootReducer","action","newState","Object","objectSpread","setActiveAsync","setAnimationAsync","setAnimation","rootSaga","regenerator_default","wrap","_context","prev","next","put","stop","_marked","_context2","takeEvery","_marked2","_context3","_marked3","_context4","_marked4","_context5","all","_marked5","saga","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","es","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cec518f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Card extends Component {\r\n    static propTypes = {\r\n        card: PropTypes.shape({\r\n            id: PropTypes.number,\r\n            color: PropTypes.string,\r\n            height: PropTypes.number,\r\n            width: PropTypes.string,\r\n        }),\r\n        active: PropTypes.number,\r\n        setActive: PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { color, height, width, id } = this.props.card;\r\n        const { setActive } = this.props\r\n\r\n        const cardStyle = {\r\n            'backgroundColor': color,\r\n            'height': height,\r\n            'width': width\r\n        }\r\n        return (\r\n            <NavLink to={`/card/${id}`}\r\n                className={`one-card ${this.props.active === id ? \"active\" : null}`}\r\n                style={cardStyle}\r\n                onClick={() => { setActive(id) }}\r\n                title={`card #${id}`}\r\n            >\r\n            </NavLink>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        active: state.active\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setActive: (id) => { dispatch({ type: \"SET_ACTIVE\", value: id }) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Card)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport OneCard from './OneCard'\r\n\r\nclass Cards extends Component {\r\n    static propTypes = {\r\n        cards: PropTypes.arrayOf(PropTypes.shape({\r\n            id: PropTypes.number,\r\n            color: PropTypes.string,\r\n            height: PropTypes.number,\r\n            width: PropTypes.string\r\n        })),\r\n        animation: PropTypes.string,\r\n        setAnim: PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { cards, animation, setAnim } = this.props;\r\n\r\n        return (\r\n            <div className=\"card-system\">\r\n                <div className=\"overlay\"></div>\r\n                <div className=\"animation\">\r\n                    <h1>Choose animation</h1>\r\n                    <form>\r\n                        <div>\r\n                            <label htmlFor=\"anim1\">animation-1</label>\r\n                            <input type=\"radio\"\r\n                                name=\"animation\"\r\n                                defaultChecked={animation === \"anim1\"}\r\n                                onChange={() => { setAnim(\"anim1\") }} />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"anim2\">animation-2</label>\r\n                            <input type=\"radio\"\r\n                                name=\"animation\"\r\n                                defaultChecked={animation === \"anim2\"}\r\n                                onChange={() => { setAnim(\"anim2\") }} />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <div className=\"cards\">\r\n                    {\r\n                        cards.map(card => {\r\n                            return <OneCard card={card} key={card.id} />\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        cards: state.cards,\r\n        animation: state.animation\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAnim: (val) => { dispatch({ type: \"SET_ANIMATION\", value: val }) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cards)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass CardFullscreen extends Component {\r\n    static propTypes = {\r\n        card: PropTypes.shape({\r\n            id: PropTypes.number,\r\n            color: PropTypes.string,\r\n            height: PropTypes.number,\r\n            width: PropTypes.string,\r\n        }),\r\n        active: PropTypes.number,\r\n        setActive: PropTypes.func\r\n    }\r\n\r\n    render() {\r\n        const { color } = this.props.card;\r\n\r\n        const cardStyle = {\r\n            'backgroundColor': color\r\n        }\r\n\r\n        return (\r\n            <NavLink to={`/`}\r\n                onClick={this.props.setActive}\r\n                className=\"card-fullscreen\"\r\n                style={cardStyle}>\r\n            </NavLink>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const id = ownProps.match.params.id;\r\n    return {\r\n        card: state.cards.find(card => (card.id).toString() === id),\r\n        active: state.active\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setActive: () => { dispatch({ type: \"SET_ACTIVE\", value: null }) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardFullscreen)\r\n","import React, { Component, Fragment } from 'react';\r\nimport './App.scss';\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Cards from './components/Cards'\r\nimport CardFullscreen from './components/CardFullscreen';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { connect } from 'react-redux'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    const { animation } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        <Route render={({ location }) => (\r\n          <TransitionGroup className=\"container\">\r\n            <CSSTransition\r\n              key={location.key}\r\n              timeout={2000}\r\n              classNames={animation}\r\n            >\r\n              <Switch location={location}>\r\n                <Route path=\"/\" exact component={Cards} />\r\n                <Route path=\"/card/:id\" component={CardFullscreen} />\r\n              </Switch>\r\n            </CSSTransition>\r\n          </TransitionGroup>\r\n        )} />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    animation: state.animation\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const rndColors = ['#c66683', '#a677a6', '#6ccb99', '#b2a87f', '#ffb700', '#9695d3', '#ffa269', '#92b7bc', '#7a98ac',\r\n    '#ff6c11', '#e0a9bf', '#d5baa8'];\r\n\r\nconst generateArray = (nums, min, max, colors = rndColors) => {\r\n    let id = 1;\r\n    return new Array(nums).fill(0).map(() => {\r\n        return {\r\n            id: id++,\r\n            color: colors[Math.floor(Math.random() * (colors.length - 1))],\r\n            height: Math.floor((Math.random() * (max - min)) + min),\r\n            width: \"200px\"\r\n        }\r\n    })\r\n}\r\n\r\nconst initState = {\r\n    cards: generateArray(30, 100, 300),\r\n    active: null,\r\n    animation: \"anim1\"\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    let newState = { ...state };\r\n    switch (action.type) {\r\n        case \"SET_Active_ASYNC\":\r\n            newState.active = action.value;\r\n            return newState\r\n        case \"SET_ANIMATION_ASYNC\":\r\n            newState.animation = action.value;\r\n            return newState\r\n        default:\r\n            return newState\r\n    }\r\n}\r\n\r\nexport default rootReducer","import { takeEvery, put, all } from 'redux-saga/effects'\r\n\r\n\r\nfunction* setActiveAsync(action) {\r\n    yield put({ type: \"SET_Active_ASYNC\", value: action.value })\r\n}\r\n\r\nfunction* setActive() {\r\n    yield takeEvery(\"SET_ACTIVE\", setActiveAsync)\r\n}\r\n\r\nfunction* setAnimationAsync(action) {\r\n    yield put({ type: \"SET_ANIMATION_ASYNC\", value: action.value })\r\n}\r\n\r\nfunction* setAnimation() {\r\n    yield takeEvery(\"SET_ANIMATION\", setAnimationAsync)\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        setActive(),\r\n        setAnimation()\r\n    ])\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { BrowserRouter, Route } from 'react-router-dom'\r\nimport rootReducer from './store/reducers/rootReducer';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootSaga from './store/sagas/rootSaga';\r\n\r\nconst saga = createSagaMiddleware()\r\nconst store = createStore(rootReducer, applyMiddleware(saga));\r\nsaga.run(rootSaga);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <Route path=\"/\" component={App} />\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}